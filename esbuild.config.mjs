import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";
import * as sass from "sass";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// 构建JavaScript
const jsContext = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

// 构建 CSS：编译 SCSS 入口并输出到插件根目录 styles.css（Obsidian 会自动加载）
async function buildCSS() {
    try {
        const entryScss = path.resolve("styles/lifeflow.scss");
        if (!fs.existsSync(entryScss)) {
            if (prod) {
                console.warn("[lifeflow] styles/lifeflow.scss 不存在，跳过样式构建。");
            }
            return;
        }
        const result = sass.compile(entryScss, { 
            style: prod ? "compressed" : "expanded",
            sourceMap: !prod
        });
        fs.writeFileSync("styles.css", result.css);
        if (!prod) {
            console.log("[lifeflow] SCSS compiled -> styles.css");
        }
    } catch (err) {
        console.error("[lifeflow] 构建样式失败:", err);
        if (prod) {
            process.exit(1);
        }
    }
}

if (prod) {
    try {
        await jsContext.rebuild();
        await buildCSS();
        console.log("[lifeflow] 生产构建完成");
        process.exit(0);
    } catch (error) {
        console.error("[lifeflow] 生产构建失败:", error);
        process.exit(1);
    }
} else {
    try {
        await jsContext.watch();
        await buildCSS();
        // 监听样式变更（scss 与 组件/页面样式）
        const chokidar = await import('chokidar');
        chokidar
            .watch([
                'styles/**/*.scss',
                'components/**/*.scss',
                'pages/**/*.scss'
            ])
            .on('change', () => {
                buildCSS();
            });
    } catch (error) {
        console.error("[lifeflow] 开发构建失败:", error);
        process.exit(1);
    }
}
